(1 week) auto installer
    me: convert killing pids to OS agnostic code
    check if things are installed
        python
        ruby
    create windows installer for python/ruby
    

(2 weeks) Server
    (2 days) create a mongo database
        let users do whatever they want with it
    (11 days) have an auth method
        (8 hours) create a mongo collection of users
            add a username, password_hash, groups, and permissions field
        (4 hours) get flask login running 
            setup with the mongo user
            use remember me
            have the login page actual log the user in
            have a logout method
        (2 hours)add methods to CurrentUser
            overwrite
            append
        (2 hours) add methods to Admin
            newUserFromDict
            findUserWith
            deleteUserWithUsername
        (8 hours) have 1 decorator for making python required
            have it parse an "and/or" statement involing
                login_required
                if_user_is_in_group()
                if_user_has_permission()
                admin_required
            if login is required add a CurrentUser object to the function
            if admin is required add an Admin object to the function
        (9 days) when compiled
            (1 day) look for a login function
                add it to the python
                otherwise create a default one 
            (8 days) check Global/ for a json permissions file
                if it exists import the permissions
                add any new python functions that have been created
                regenerate the permissions list with newly added functions
                add restrictions based on a condition involving
                    1. login_required
                    2. admin_login_required
                    3. if_user_is_in_group()
                    4. if_user_has_permission()
                if the condition is empty fill it with "Public: no login required"
        (8 hours) do flask login right
            use alternative tokens
            have the user mongo-document have a logged in devices list
            have the client hash their remember_me key with with datetime (hours but no min or sec)
            have the server login method hash the remeber_me key with the datetime (hours but no min or sec) and then check it agaisnt the device keys
            
    (later / NA) Videos
     
    (later / NA) Downloads

    (later / NA) Push notifications





(4 days + 1 month) Client
    (4 hours) Add a "wait({seconds: _ , for: _ )" function to use with await
        have it return an await timeout object

    (2 hours) edit LoadPage
        add page history
        add Global.CurrentPath
        
    (2 hours) create a Module() class
        have the constructor 
            store a string, 
            check if the module exists in the backend
            add error if module doesnt exist
        edit the add() function to check for Modules
            if its a module just load the module from the backend code
    
    (2 hours) rename Run to Server
        have the request use Gobal.CurrentPath for relative pathing
        add errors for python that doesnt exist
    
    (2 hours) add to proto, ifSomeoneSays( _ , _ )
        create a standard Simple event
        just have this attach a listener
    
    (4 hours) add to all modules, Tell( _ , _ , data)
        have a global Everyone object
        have it be able to tell active modules or this page
        give an error for other pages
        send an event using Simple event

    (1 day) add a addToHistory() function
        have it write a varible to the url
        have a function that parses the URL 
        have modules depend on data from the URL for handling goBack scenarios
        ex: going to the next page in a pagination would be addToHistory("page",5) and then loading the next page
        ex: loading from history would be var page = getFromUrl("page")

    (2 days) Make data persistant
        on html page load, pull data from indexDB into Global
        on Global set, set global, the asyncly write to indexDB
        on Global get, just return global
    
    (2 weeks) create SimpleDOM
        create a Button
            have a preset option for different forms

        create an Input
            have a preset option for different forms

        create a Dropdown
            have a preset option for different forms

        create a horizontal list class
            all elements stored in an array
                each element can be aligned to the 
                    top
                    bottom
                    vertical center

        for every kind of element (div, a, p, etc)
            create a class for it
            set all of its attributes directly to the default material UI style
            have a setter for all of the events allowed on the element

        create a text element
            escape all of the html
            convert all the newlines etc into html form
            use the html tag that preserves spaces and newlines
            allow toggling of word wrap
            overload the .add to integrate text (instead of creating nested tags)

        create an Image Element
            if there are no dimensions/primary color given
                then make request for image.info
                if the image hasn't loaded
                    generate a square with the dimensions/color
                if the image hasn't loaded
                    attach the square
            then have it make a request for the image
                when the request is fulfilled, 
                    if the square has loaded
                        replace the square with the image
                    else
                        just attach the image
            on compile time
                for all images in the Website folder
                    create an image reference for flask (probably in static/) 
                        use the path and name of the image to generate a name for the static folder
                    create a .info file for the image
                        get the dimensions of the image 
                        get the primary color of the image
                        create a file 
                            with the same name/path as the 
                            but with .info at the end
                            have it include the dimensions and primary color



(1 Month) 2cents
    the splash site
        create a login module
        create a signup module
            have a user signup
            have a owner signup
        create a homepage
        (2 days) create a logo
        create an explaination page

    the owner site
        dashboard
            owner key
            charge per visit
            number of requests sent

    2cents redirect page
        info about whats going on and how to quick fix it

    2cents account balance page
        dashboard explaining why funds are needed and what can be done about it

    extension
        inject
            2cent user key into cookie

    owner's server
        receiving user request
            if no 2cent key
                send user to 2cents install page
                    along with the the return site url
            if 2cent key
                request "verify" from 2cents 
                    send the user key
                    the owner key
                
    2cents server
        create a method for receiving money
        create a method for sending money
        
        receiving verify
            get the charge amount for the owner
            if this fails, 
                then return user number error page
            get the account balance of the user
            if this fails
                return a page to the user explaining the owners situation
            
            if effective balance is greater than the charge amount
                asyncly 
                    add a transaction to the users account
                    reduce the users effective balance
                    add a transaction to the company account
                    add the amount to the owners account
            else
                return user account balance page
        on the first of the month
            get the first company who has not been paid
                sum up their account
                if it has not been paid, pay it to them
                mark the account as paid
                check if any more companies have not been paid
