SimpleStack

SimpleStack and its dependencies are installed as a pkg
If working alone:
    then just create the website files and open them in the users perfered editor
If working with a team:
    then ask for git login info
    then create a repo and populate it with the website files and open the files in the users perfered editor


On compilation

    check if files are compiled, only the changed/new files are compiled
    1. If there is only Javascipt then nothing will be hosted, it will just be a run in the browser
    2. If there is Python code then a server will be created locally and the browser will be opened up with it
        compile the Javascipt 
        run the pre-server python code
            if there is code for a database, then make sure the database exists
            the python pre-server code will create the database structure
            if the database structure has changed, then update the database
            if there are any .remote_db_action files without a .db_action file, 
            then check the timeline of the .remote_db_action files, 
            make sure the .remote_db_action are sorted in order 
            then undo any database actions that happened before the .remote_db_action
            then redo all of the .remote_db_actions and create a untracked .db_action file for each completed action


    at development runtime
        every change (delete something, add something) to the database creates 
        both a git-tracked .remote_db_action file and a git-untracked .db_action file 
        the db_action file includes both the database change and an undo database change,
        as well as all the data needed to complete either action and the relative time the action occured

WebsiteProduction:


Stage 1: the simple stack
    - server hosted on each dev computer
    - no database (backend save data into files)
    - version control with normal git and all data is hosted on the clone (even npm modules)
    Stage Goals:
        > protoype client layout/structure
        > protoype api functionality
        > build out client and api together, QA testing with very small data
        > establish and fully check api security/permissions

Stage 2: databased stack
    - at 
    - development data is stored as regular files in git repo
    - all database structure changes are stored in a folder structure on the git repo
    - database server is hosted on each dev computer
    - version control clones git then makes changes 
    Stage Goals:
        > integrate, test, and debug database